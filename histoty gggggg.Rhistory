final <- read_excel("C:/Users/kumbalas-INS/Downloads/CAN_macro_data.xlsx")
library(readxl)
final <- read_excel("C:/Users/kumbalas-INS/Downloads/CAN_macro_data.xlsx")
# Scale variables (except interest rate and oil prices), take logs, and multiply by 100
final <- final %>%
mutate(EMPL = log(EMPL) * 100,
CPI.CPI = log(CPI.CPI) * 100,
M1.M1 = log(M1.M1) * 100)
install.packages("ggplot2")
library(ggplot2)
# Load required libraries for VAR analysis
install.packages("vars")
library(vars)
# Scale variables (except interest rate and oil prices), take logs, and multiply by 100
final <- final %>%
mutate(EMPL = log(EMPL) * 100,
CPI.CPI = log(CPI.CPI) * 100,
M1.M1 = log(M1.M1) * 100)
# Scale variables (except interest rate and oil prices), take logs, and multiply by 100
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
final <- final %>%
mutate(EMPL = log(EMPL) * 100,
CPI.CPI = log(CPI.CPI) * 100,
M1.M1 = log(M1.M1) * 100)
# Convert nominal oil prices to real oil prices using the CPI price index
final$P_COMM.P_OIL <- final$P_COMM.P_OIL - final$CPI.CPI
# Convert the date to a proper date format
final$date <- as.Date(final$date)
View(final)
colnames(final)
ggplot(final, aes(x = date)) +
geom_line(aes(y = EMPL, color = "Employment")) +
geom_line(aes(y = CPI.CPI, color = "CPI")) +
geom_line(aes(y = M1.M1, color = "M1")) +
geom_line(aes(y = P_COMM.P_OIL, color = "Oil")) +
geom_line(aes(y = OVERNIGHT.OVERNIGHT, color = "Rate")) +
labs(title = "Time Series of Variables",
x = "Date",
y = "Values") +
scale_color_manual(values = c("Employment" = "blue",
"CPI" = "black",
"M1" = "green",
"Oil" = "orange",
"Rate" = "purple")) +
theme(legend.position = "right")
plot(final)
plot.ts(final)
ggplot(final, aes(x = date)) +
geom_line(aes(y = EMPL, color = "Employment")) +
geom_line(aes(y = CPI.CPI, color = "CPI")) +
geom_line(aes(y = M1.M1, color = "M1")) +
geom_line(aes(y = P_COMM.P_OIL, color = "Oil")) +
geom_line(aes(y = OVERNIGHT.OVERNIGHT, color = "Rate")) +
labs(title = "Combined graph of Xt vector",
x = "Date",
y = "Values") +
scale_color_manual(values = c("Employment" = "blue",
"CPI" = "black",
"M1" = "green",
"Oil" = "orange",
"Rate" = "purple")) +
theme(legend.position = "right")
install.packages("vars")
install.packages("vars")
library(vars)
# Assuming 'your_data' is your data frame with the variables
lag_order <- VARselect(final, type = "const", trend = "both")
# Assuming 'your_data' is your data frame with the variables
lag_order <- VARselect(final, type = "const")
View(final)
selected_lags <- lag_order$selection[1]  # Choose the lag with the lowest AIC
lagselection = VARselect(final, lag.max = 10, type = "const")
final.st_diff <- apply(final, 2, diff)
# Create a VAR object
var_data <- final[, c("EMPL", "CPI.CPI", "OVERNIGHT.OVERNIGHT", "P_COMM.P_OIL", "M1.M1")]
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(data = final) + geom_point(mapping = aes(x = EMPL, y = CPI.CPI ))
ggplot(data = final) + geom_point(mapping = aes(x = CPI.CPI, y = EMPL))
colnames(final)
ggplot(data = final) + geom_point(mapping = aes(x = EMPL, y = OVERNIGHT.OVERNIGHT ))
ggplot(data = final) + geom_point(mapping = aes(x = OVERNIGHT.OVERNIGHT, y = EMPL))
final2 <- read_excel("C:/Users/kumbalas-INS/Downloads/CAN_macro_data.xlsx")
ggplot(data = final2) + geom_point(mapping = aes(x = EMPL, y = CPI.CPI ))
ggplot(data = final2) + geom_point(mapping = aes(x = CPI.CPI, y = EMPL))
ggplot(data = final2) + geom_point(mapping = aes(x = EMPL, y = OVERNIGHT.OVERNIGHT ))
ggplot(data = final2) + geom_point(mapping = aes(x = OVERNIGHT.OVERNIGHT, y = EMPL))
ggplot(data = final2) + geom_point(mapping = aes(x = OVERNIGHT.OVERNIGHT, y = M1.M1))
empl = ts(var_data$EMPL, start = c(1961, 01, 01), frequency = 12)
cpi = ts(var_data$CPI.CPI, start = c(1961, 01, 01), frequency = 12)
rate = ts(var_data$OVERNIGHT.OVERNIGHT, start = c(1961, 01, 01), frequency = 12)
oil = ts(var_data$P_COMM.P_OIL, start = c(1961, 01, 01), frequency = 12)
m1 = ts(var_data$M1.M1, start = c(1961, 01, 01), frequency = 12)
# datermine the persistence of the model
acf(cpi)
final.st = cbind(empl, cpi, m1, oil, rate)
acf(final.st)
pacf(final.st)
# Check correlation matrix
cor_matrix <- cor(final.st)
# Print correlation matrix
print(cor_matrix)
# Check for variables with high correlation
highly_correlated <- findCorrelation(cor_matrix, cutoff = 0.95)
install.packages("caret")
library(caret)
# Check for variables with high correlation
highly_correlated <- findCorrelation(cor_matrix, cutoff = 0.95)
# Print variables with high correlation
print(names(highly_correlated))
# Load required libraries for VAR analysis
library(vars)
View(cor_matrix)
lagselection = VARselect(final.st, lag.max = 10, type = "const")
View(lagselection)
lagselection$selection
# Assuming you want to use the lag order selected based on AIC
var_model1 <- VAR(final.st, p = lagselection$selection[1])
var_model2 <- VAR(final.st, p = lagselection$selection[2])
# the lag order selection
AIC <- VAR(final.st, p = lagselection$selection[1])
HQ <- VAR(final.st, p = lagselection$selection[2])
SC <- VAR(final.st, p = lagselection$selection[3])
FPE <- VAR(final.st, p = lagselection$selection[4])
# Print a summary of the VAR model
aic = summary(AIC)
# Print a summary of the VAR model
summary(AIC)
# Identify the shock variable (use the first variable as an example)
shock_variable <- colnames(final)[1]
# Estimate Cholesky decomposition
svar <- SVAR(final, lag = 4, type = "const", season = NULL, exogen = NULL)
# Estimate VAR model
VAR_order <- lagselection$selection[1]  # Replace with your lag order
var_model <- VAR(final, p = VAR_order, type = "const")
hq = summary(HQ)
sc = summary(SC)
fpe = summary(FPE)
# Assuming you want to use a higher lag order (e.g., 15)
var_model1 <- VAR(final.st, p = 15)
# Print a summary of the VAR model
summary(var_model1)
# Check for constant variables
constant_vars <- apply(final.st, 2, function(x) length(unique(x)) == 1)
# Print names of constant variables
print(names(constant_vars[constant_vars]))
# Remove constant variables
final.st_no_const <- final.st[, !constant_vars]
# Fit VAR model without constant variables
var_model2 <- VAR(final.st_no_const, p = 15)
# Print a summary of the VAR model
summary(var_model2)
# Fit VAR model with a reduced lag order (e.g., 5)
var_model3 <- VAR(final.st_no_const, p = 5)
# Print a summary of the VAR model
summary(var_model3)
# Check correlation matrix
cor_matrix <- cor(final.st_no_const)
# Print correlation matrix
print(cor_matrix)
# Find highly correlated variable pairs
highly_correlated_pairs <- which(cor_matrix > 0.8 & cor_matrix < 1, arr.ind = TRUE)
# Print highly correlated variable pairs
print(highly_correlated_pairs)
adf.test(final.st)
install.packages("tseries")
library(tseries)
# Loop through columns and apply ADF test
for (col in colnames(final.st)) {
col_data <- final.st[, col]
adf_test_result <- adf.test(col_data)
print(paste("ADF Test for", col))
print(adf_test_result)
}
# Differencing each column
final.st_diff <- apply(final.st, 2, diff)
# Print the head of the differenced data frame
head(final.st_diff)
# Loop through columns and apply ADF test
for (col in colnames(final.st_diff)) {
col_data <- final.st_diff[, col]
adf_test_result <- adf.test(col_data)
print(paste("ADF Test for", col))
print(adf_test_result)
}
lagselection = VARselect(final.st_diff, lag.max = 10, type = "const")
lagselection$selection
# the lag order selection
AIC <- VAR(final.st_diff, p = lagselection$selection[1])
HQ <- VAR(final.st_diff, p = lagselection$selection[2])
SC <- VAR(final.st_diff, p = lagselection$selection[3])
FPE <- VAR(final.st_diff, p = lagselection$selection[4])
# Print a summary of the VAR model
aic = summary(AIC)
hq = summary(HQ)
sc = summary(SC)
fpe = summary(FPE)
# Check correlation matrix
cor_matrix_diff <- cor(final.st_diff)
print(cor_matrix_diff)
# Check VIF (install the 'car' package if not already installed)
# install.packages("car")
library(car)
# Check VIF (install the 'car' package if not already installed)
install.packages("car")
install.packages("car")
library(car)
vif_results <- vif(lm(final.st_diff[, -1] ~ ., data = final.st_diff))
diff = as.data.frame(final.st_diff)
vif_results <- vif(lm(diff[, -1] ~ ., data = diff))
# Convert matrix to data frame
diff <- as.data.frame(final.st_diff)
# Check the structure of the data frame
str(diff)
# Now try VIF calculation again
vif_results <- vif(lm(diff[, -1] ~ ., data = diff))
lagselection = VARselect(diff, lag.max = 10, type = "const")
lagselection$selection
# the lag order selection
AIC <- VAR(diff, p = lagselection$selection[1])
HQ <- VAR(diff, p = lagselection$selection[2])
SC <- VAR(diff, p = lagselection$selection[3])
FPE <- VAR(diff, p = lagselection$selection[4])
# Print a summary of the VAR model
aic = summary(AIC)
# Fit VAR model
var_model <- vars::VAR(diff, p = 10)
var_model2 <- vars::VAR(diff, p = 6)
# Impulse response analysis
irf_results <- vars::irf(var_model, impulse = c("cpi", "m1", "oil", "empl"), response = c("rate"), n.ahead = 48)
irf_results2 <- vars::irf(var_model2, impulse = c("cpi", "m1", "oil", "empl"), response = c("rate"), n.ahead = 48)
# Plot the results
plot(irf_results)
plot(irf_results2)
# Assuming 'FEDFUNDS' and 'oil' are your monetary policy and oil price variables
monetary_shock <- c("rate")
oil_shock <- c("oil")
irf_results_monetary <- vars::irf(var_model, impulse = monetary_shock, response = c("cpi", "m1", "oil", "empl"), n.ahead = 48)
plot(irf_results_monetary, main = "Impulse Response to Monetary Policy Shock")
irf_results_monetary <- vars::irf(var_model, impulse = monetary_shock, response = c("cpi", "m1", "empl"), n.ahead = 48)
plot(irf_results_monetary, main = "Impulse Response to Monetary Policy Shock")
irf_results_oil <- vars::irf(var_model, impulse = oil_shock, response = c("cpi", "m1", "empl"), n.ahead = 48)
plot(irf_results_oil, main = "Impulse Response to Oil Price Shock")
irf_results_monetary_emp <- vars::irf(var_model, impulse = monetary_shock, response = c("empl"), n.ahead = 48)
plot(irf_results_monetary_emp, main = "Impulse Response to Monetary Policy Shock (EMPL)")
irf_results_monetary_emp2 <- vars::irf(var_model2, impulse = monetary_shock, response = c("empl"), n.ahead = 48)
plot(irf_results_monetary_emp2, main = "Impulse Response to Monetary Policy Shock (EMPL)")
plot(irf_results_monetary_emp, main = "Impulse Response to Monetary Policy Shock (EMPL1)")
plot(irf_results_monetary_emp2, main = "Impulse Response to Monetary Policy Shock (EMPL2)")
View(var_model2)
irf_results_monetary_emp <- vars::irf(var_model2, impulse = monetary_shock, response = c("cpi"), n.ahead = 48)
irf_results_monetary_cpi <- vars::irf(var_model2, impulse = monetary_shock, response = c("cpi"), n.ahead = 48)
plot(irf_results_monetary_cpi, main = "Impulse Response to Monetary Policy Shock (EMPL2)")
plot(irf_results_monetary_cpi, main = "Impulse Response to Monetary Policy Shock (CPI)")
irf_results_monetary_m1 <- vars::irf(var_model2, impulse = monetary_shock, response = c("m1"), n.ahead = 48)
plot(irf_results_monetary_m1, main = "Impulse Response to Monetary Policy Shock (M1)")
irf_results_oil_emp <- vars::irf(var_model2, impulse = oil_shock, response = c("empl"), n.ahead = 48)
plot(irf_results_oil_emp, main = "Impulse Response to Oil Shock (EMPL)")
irf_results_oil_cpi <- vars::irf(var_model2, impulse = oil_shock, response = c("cpi"), n.ahead = 48)
plot(irf_results_oil_cpi, main = "Impulse Response to Oil Shock (CPI)")
irf_results_oil_m1 <- vars::irf(var_model2, impulse = oil_shock, response = c("m1"), n.ahead = 48)
plot(irf_results_oil_m1, main = "Impulse Response to Oil Shock (M1)")
irf_results_monetary <- vars::irf(var_model2, impulse = monetary_shock, response = c("cpi", "m1", "empl"), n.ahead = 48)
plot(irf_results_monetary, main = "Impulse Response to Monetary Policy Shock")
irf_results_oil <- vars::irf(var_model2, impulse = oil_shock, response = c("cpi", "m1", "empl"), n.ahead = 48)
plot(irf_results_oil, main = "Impulse Response to Oil Price Shock")
var_model3 <- vars::VAR(diff, p = 2)
var_model4 <- vars::VAR(diff, p = 2)
irf_results_oil <- vars::irf(var_model3, impulse = oil_shock, response = c("cpi", "m1", "empl"), n.ahead = 48)
irf_results_monetary <- vars::irf(var_model3, impulse = monetary_shock, response = c("cpi", "m1", "empl"), n.ahead = 48)
plot(irf_results_monetary, main = "Impulse Response to Monetary Policy Shock")
plot(irf_results_oil, main = "Impulse Response to Oil Price Shock")
var_model4 <- vars::VAR(diff, p = 1)
irf_results_oil <- vars::irf(var_model4, impulse = oil_shock, response = c("cpi", "m1", "empl"), n.ahead = 48)
irf_results_monetary <- vars::irf(var_model4, impulse = monetary_shock, response = c("cpi", "m1", "empl"), n.ahead = 48)
plot(irf_results_monetary, main = "Impulse Response to Monetary Policy Shock")
plot(irf_results_oil, main = "Impulse Response to Oil Price Shock")
# Assuming 'final' is your data frame
VAR_order <- 6
# Estimate VAR model
var_model7 <- VAR(final, p = VAR_order, type = "const")
# Estimate VAR model
var_model7 <- VAR(diff, p = VAR_order, type = "const")
# Check the summary of the VAR model
summary(var_model)
# Estimate VAR model
var_model7 <- VAR(diff, p = VAR_order, type = "trend")
# Check the summary of the VAR model
summary(var_model)
# Check the summary of the VAR model
summary(var_model7)
# Load the vars package
library(vars)
# Estimate the SVAR using Cholesky decomposition
svar_model <- irf(var_model7, impulse = monetary_shock, response = c("cpi", "m1", "empl"), boot = FALSE, cumulative = FALSE)
# Print the SVAR results
print(svar_model)
# Estimate VAR model
var_model71 <- VAR(final, p = VAR_order, type = "trend")
# Estimate VAR model
var_model71 <- VAR(diff, p = VAR_order, type = "trend")
# Perform Cholesky decomposition to get the SVAR
svar_model <- restrict(var_model71, "cholesky")
# Perform Cholesky decomposition to get the SVAR
svar_model <- restrict(var_model71, method = "manual", mod = diag(VAR_order))
# Perform Cholesky decomposition to get the SVAR
svar_model <- restrict(var_model71, "cholesky")
# Perform Cholesky decomposition to get the SVAR
svar_model <- restrict(var_model71, method = "manual", mod = diag(VAR_order))
# Assuming 'final' is your data frame
VAR_order <- 6
# Estimate VAR model
var_model7 <- VAR(diff, p = VAR_order, type = "trend")
# Perform Cholesky decomposition to get the SVAR
svar_model <- Bvar(var_model7, lrvar = "Cholesky")
# Perform Cholesky decomposition to get the SVAR
svar_model <- irf(var_model7, impulse = monetary_shock, response = c("cpi", "m1", "empl"), boot = FALSE, cumulative = TRUE, n.ahead = 10)
# Print the SVAR results
print(svar_model)
# Assuming 'svar_model' is your SVAR model
# You may need to install the 'vars' package if not already installed
# install.packages("vars")
library(vars)
# Plot the impulse response functions
plot(svar_model, n.ahead = 11, names = c("empl", "cpi", "m1"), main = "Impulse Response Functions")
irf_results_monetarysvar <- vars::irf(var_model71, impulse = monetary_shock, response = c("cpi", "m1", "empl"), n.ahead = 48)
warnings()
# Run FEVD for k = 12, 24, and 48 months ahead
fevd_results <- fevd(svar_model, n.ahead = c(12, 24, 48))
# Assuming 'svar_model' is your SVAR model
# You may need to install the 'vars' package if not already installed
# install.packages("vars")
library(vars)
# Run impulse response functions (IRF)
irf_results <- irf(svar_model, n.ahead = 48)
# Initialize matrices to store FEVD results
fevd_matrix <- matrix(NA, nrow = length(irf_results), ncol = ncol(irf_results[[1]]$fcov))
# Run impulse response functions (IRF) manually
irf_manual <- irfmanual(svar_model, n.ahead = 48)
# Run impulse response functions (IRF) manually
irf_results <- irf(svar_model, n.ahead = 48)
# Run impulse response functions (IRF) manually
irf_results <- irf(var_model2, n.ahead = 48)
# Extract the variance-covariance matrix of the residuals
residual_cov <- svar_model$Sigma
# Initialize matrices to store FEVD results
fevd_matrix <- matrix(NA, nrow = length(irf_results), ncol = ncol(irf_results[[1]]$fcov))
# Extract the variance-covariance matrix of the residuals
residual_cov <- var_model2$Sigma
# Initialize matrices to store FEVD results
fevd_matrix <- matrix(NA, nrow = length(irf_results), ncol = ncol(irf_results[[1]]$fcov))
# Calculate FEVD for each period
for (i in seq_along(irf_results)) {
fevd_matrix[i, ] <- colSums((irf_results[[i]]$fcov %*% t(irf_results[[i]]$fcov)) * residual_cov)
}
# Normalize the FEVD matrix to get proportions
fevd_matrix <- fevd_matrix / rowSums(fevd_matrix)
# Plot FEVD for employment (empl) and CPI (cpi)
matplot(1:48, fevd_matrix[, c("empl", "cpi")], type = "l", lty = 1, col = 1:2,
xlab = "Forecast Horizon", ylab = "Proportion of Variance",
main = "FEVD for Employment and CPI")
legend("topright", legend = c("empl", "cpi"), col = 1:2, lty = 1)
# Run impulse response functions (IRF) manually
irf_results <- irf(var_model2, n.ahead = 48)
# Extract the variance-covariance matrix of the residuals
residual_cov <- var_model2$Sigma
# Initialize matrices to store FEVD results
fevd_matrix <- matrix(NA, nrow = length(irf_results), ncol = ncol(irf_results[[1]]$fcov))
# Initialize matrices to store FEVD results
fevd_matrix <- matrix(diff, nrow = length(irf_results), ncol = ncol(irf_results[[1]]$fcov))
fevd_matrix <- matrix(0, nrow = length(irf_results), ncol = ncol(irf_results[[1]]$fcov))
fevd1 = fevd(var_model2, n.ahead = 48)
plot(fevd1)
fevd2 = fevd(var_model2, n.ahead = 24)
plot(fevd2)
fevd3 = fevd(var_model2, n.ahead = 12)
plot(fevd3)
fevd4 = fevd(var_model2, n.ahead = 10)
plot(fevd4)
library(readxl)
us <- read_excel("C:/Users/kumbalas-INS/Downloads/US_CEE1999_data.xlsx")
View(us)
colnames(us)
# Assuming 'us' is your data frame
# Scale variables (convert to percentage changes)
us_scaled <- data.frame(
EMPL = scale(us$EMPL, center = TRUE, scale = TRUE),
CPI = scale(us$US_CPI.CPI, center = TRUE, scale = TRUE),
RPoil = scale(us$P_COMM.P_OIL, center = TRUE, scale = TRUE),
NBR = scale(us$NBR.NBR, center = TRUE, scale = TRUE),
MB = scale(us$RES.MB, center = TRUE, scale = TRUE),
M2 = scale(us$M2.M2, center = TRUE, scale = TRUE),
FFR = scale(us$FEDFUNDS.FEDFUNDS, center = TRUE, scale = TRUE)
)
# Log-transform variables
us_logged <- data.frame(
EMPL = log(us_scaled$EMPL),
CPI = log(us_scaled$CPI),
RPoil = log(us_scaled$RPoil),
NBR = log(us_scaled$NBR),
MB = log(us_scaled$MB),
M2 = log(us_scaled$M2),
FFR = us_scaled$FFR  # FFR is assumed to be in percentage, no need to log-transform
)
# Add a small positive constant to avoid zero or negative values before log transformation
epsilon <- 1e-10  # You can adjust this value based on your data
us_scaled_positive <- us_scaled
us_scaled_positive[us_scaled_positive <= epsilon] <- epsilon
# Log-transform variables
us_logged <- data.frame(
EMPL = log(us_scaled_positive$EMPL),
CPI = log(us_scaled_positive$CPI),
RPoil = log(us_scaled_positive$RPoil),
NBR = log(us_scaled_positive$NBR),
MB = log(us_scaled_positive$MB),
M2 = log(us_scaled_positive$M2),
FFR = us_scaled_positive$FFR  # FFR is assumed to be in percentage, no need to log-transform
)
# Convert Nominal Oil Prices to Real Oil Prices Using CPI
us_logged$RPoil_real <- us_logged$RPoil - log(us$US_CPI.CPI)
# Drop the original RPoil column
us_logged <- us_logged[, -which(names(us_logged) == "RPoil")]
# Add a sufficiently large constant to eliminate negative values in NBR
offset_constant <- 10000  # You can adjust this value based on your data
us_logged$NBR_offset <- us_logged$NBR + offset_constant
# Log-transform the NBR_offset variable
us_logged$NBR_log <- log(us_logged$NBR_offset)
# Drop the original NBR and NBR_offset columns
us_logged <- us_logged[, -which(names(us_logged) %in% c("NBR", "NBR_offset"))]
# Plot all transformed variables
par(mfrow = c(2, 3))  # Set up a 2x3 grid for the plots
# Plot EMPL
plot(us_logged$EMPL, type = "l", col = "blue", xlab = "Time", ylab = "Log(EMPL)", main = "Employment")
# Plot CPI
plot(us_logged$CPI, type = "l", col = "red", xlab = "Time", ylab = "Log(CPI)", main = "Consumer Price Index")
# Plot RPoil
plot(us_logged$RPoil_real, type = "l", col = "green", xlab = "Time", ylab = "Log(Real Oil Price)", main = "Real Oil Price")
# Plot NBR_log
plot(us_logged$NBR_log, type = "l", col = "purple", xlab = "Time", ylab = "Log(Non-Borrowed Reserves)", main = "Non-Borrowed Reserves")
# Plot MB
plot(us_logged$MB, type = "l", col = "orange", xlab = "Time", ylab = "Log(Total Reserves)", main = "Total Reserves")
# Plot M2
plot(us_logged$M2, type = "l", col = "brown", xlab = "Time", ylab = "Log(M2 Money Stock)", main = "M2 Money Stock")
# Reset the plotting parameters to default
par(mfrow = c(1, 1))
# Add a sufficiently large constant to eliminate negative values in NBR
offset_constant <- 10000  # You can adjust this value based on your data
us_logged$NBR_offset <- us_logged$NBR + offset_constant
# Log-transform the NBR_offset variable
us_logged$NBR_log <- log(us_logged$NBR_offset)
# Drop the original NBR and NBR_offset columns
us_logged <- us_logged[, -which(names(us_logged) %in% c("NBR", "NBR_offset"))]
# Combine all transformed variables into a matrix
plot_data <- cbind(
us_logged$EMPL,
us_logged$CPI,
us_logged$RPoil_real,
us_logged$NBR_log,
us_logged$MB,
us_logged$M2
)
# Plot all transformed variables in a single graph
matplot(plot_data, type = "l", col = c("blue", "red", "green", "purple", "orange", "brown"),
xlab = "Time", ylab = "Logged and Transformed Variables",
main = "Transformed Variables Over Time", lty = 1)
# Add legend
legend("topright", legend = colnames(plot_data), col = c("blue", "red", "green", "purple", "orange", "brown"), lty = 1)
savehistory("~/Final/histoty gggggg.Rhistory")
